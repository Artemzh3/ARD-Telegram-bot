import asyncio
import logging

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from dependencies import (
    bot,
    dp,
    giga,
    get_builder_markup_callback,
    list_not_to_builder_messages,
)

# --- –•–†–ê–ù–ò–õ–ò–©–ï –ö–û–ù–¢–ï–ö–°–¢–û–í ---
user_contexts = {}  # user_id -> list[str]


def add_to_context(user_id: int, message_text: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫—É) –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    user_contexts[user_id].append(message_text)
    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_contexts[user_id]) > 10:
        user_contexts[user_id] = user_contexts[user_id][-10:]


def get_context_text(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    context = user_contexts.get(user_id, [])
    return "\n".join(context)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---


@dp.message(Command("start"))
async def start(message: Message) -> None:
    username = message.from_user.username or "–¥—Ä—É–≥"
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{username}</b>! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>ARD</b> ü§ñ\n"
        f"–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É üòâ"
    )


@dp.message()
async def question(message: Message):
    user_id = message.from_user.id
    text = message.text

    if not isinstance(text, str):
        await message.answer("–Ø –Ω–µ –º–æ–≥—É —ç—Ç–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_context(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}")

    text_lower = text.lower().strip()

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–∫—Ç–æ —Ç—ã" –∏–ª–∏ –ø–æ—Ö–æ–∂–µ–µ ---
    who_phrases = [
        "–∫—Ç–æ —Ç—ã",
        "–∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π",
        "—á—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ",
        "–∫—Ç–æ —Ç–∞–∫–æ–π ard",
        "–∫—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ",
        "–∫—Ç–æ —Ç—ã –±–æ—Ç",
        "–∫—Ç–æ —Ç—ã –µ—Å—Ç—å",
        "who are you",
        "who r u",
        "what are you",
        "what is ard",
    ]
    if any(phrase in text_lower for phrase in who_phrases):
        await message.answer(
            "–Ø ‚Äî <b>ARD</b> ü§ñ, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. "
            "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—Å—Ç–æ –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É üòâ"
        )
        add_to_context(user_id, "–ë–æ—Ç: –Ø ‚Äî ARD, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ")
        return

    # --- –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    await message.answer("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... ü§î")

    # --- –ü—Ä–æ—Å—Ç—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) ---
    if text_lower in list_not_to_builder_messages:
        response = giga.invoke(text)
        answer = response.content

        add_to_context(user_id, f"–ë–æ—Ç: {answer}")

        try:
            await bot.delete_message(
                chat_id=message.chat.id, message_id=message.message_id + 1
            )
        except Exception:
            pass

        await message.reply(f"–û—Ç–≤–µ—Ç: \n\n<b>{answer}</b>")
        return

    # --- –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∫–Ω–æ–ø–∫–∞–º–∏) ---
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info"),
        InlineKeyboardButton(text="–ö—Ä–∞—Ç—á–µ", callback_data="short_info"),
    )
    builder.row(InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ", callback_data="same_info"))

    context = get_context_text(user_id)
    response = giga.invoke(
        f"–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n{context}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."
    )
    answer = response.content

    add_to_context(user_id, f"–ë–æ—Ç: {answer}")

    try:
        await bot.delete_message(
            chat_id=message.chat.id, message_id=message.message_id + 1
        )
    except Exception:
        pass

    await message.reply(f"–û—Ç–≤–µ—Ç: \n\n<b>{answer}</b>", reply_markup=builder.as_markup())


# --- CALLBACKS ---


@dp.callback_query(F.data == "more_info")
async def handle_more_info(callback: CallbackQuery):
    original = callback.message.text or ""
    user_id = callback.from_user.id
    context = get_context_text(user_id)
    response = giga.invoke(
        f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤: {original}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
    )
    answer = response.content

    try:
        await bot.delete_message(
            chat_id=callback.message.chat.id, message_id=callback.message.message_id
        )
    except Exception:
        pass

    await callback.message.answer(
        f"–í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \n\n<b>{answer}</b>",
        reply_markup=get_builder_markup_callback().as_markup(),
    )
    add_to_context(user_id, f"–ë–æ—Ç: {answer}")


@dp.callback_query(F.data == "short_info")
async def handle_short_info(callback: CallbackQuery):
    original = callback.message.text or ""
    user_id = callback.from_user.id
    context = get_context_text(user_id)
    response = giga.invoke(f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {original}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}")
    answer = response.content

    try:
        await bot.delete_message(
            chat_id=callback.message.chat.id, message_id=callback.message.message_id
        )
    except Exception:
        pass

    await callback.message.answer(
        f"–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \n\n<b>{answer}</b>",
        reply_markup=get_builder_markup_callback().as_markup(),
    )
    add_to_context(user_id, f"–ë–æ—Ç: {answer}")


@dp.callback_query(F.data == "same_info")
async def handle_same_info(callback: CallbackQuery):
    original = callback.message.text or ""
    user_id = callback.from_user.id
    context = get_context_text(user_id)
    response = giga.invoke(
        f"–ù–∞–π–¥–∏ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —ç—Ç—É —Ç–µ–º—É: {original}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
    )
    answer = response.content

    try:
        await bot.delete_message(
            chat_id=callback.message.chat.id, message_id=callback.message.message_id
        )
    except Exception:
        pass

    await callback.message.answer(
        f"–í–æ—Ç –ø–æ—Ö–æ–∂–∞—è —Ç–µ–º–∞: \n\n<b>{answer}</b>",
        reply_markup=get_builder_markup_callback().as_markup(),
    )
    add_to_context(user_id, f"–ë–æ—Ç: {answer}")


# --- –ó–ê–ü–£–°–ö ---
async def main() -> None:
    await dp.start_polling(bot)


log = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

if __name__ == "__main__":
    log.info("Bot has started")
    asyncio.run(main())
    log.info("Bot has stopped")
